{"name":"Piezo","tagline":"","body":"Piezo\r\n=====\r\n\r\nEver wished you could define, implement, deploy and access network services in Java? Well, that's already possible. Ever wished it took 5 minutes? With Piezo, it's a simple as:\r\n\r\n1. Define a service in the protocol buffer IDL syntax.\r\n2. Implement the generated Java interface.\r\n3. Surface the implementations over, e.g. a vanilla TCP socket. Need to make it available to outside users? Piezo ships with a JSON-RPC implementation over HTTP.\r\n4. Use it right away! Getting a client stub takes all of two lines of code.\r\n\r\n\r\nIn More Details\r\n---------------\r\n\r\nPiezo is a Java RPC stack that combines [Protocol Buffers](https://code.google.com/p/protobuf/), [Netty](http://netty.io/) and [Guava](https://code.google.com/p/guava-libraries/) in order to provide a state-of-the-art, lightweight, reliable and well-performing channel for deploying and accessing network services.\r\n\r\nPiezo is made of two components working hand in hand:\r\n\r\n- A plugin for the Protocol Buffer compiler that generates concrete implementations of protobuf services\r\n- A framework that defines a generic RPC abstraction between client and server\r\n- Implementations of clients and servers â€” binary/socket based or JSON-RPC/HTTP implementations are available \r\n\r\nThe Javadoc for the framework is available [here](http://soliton.io/piezo/apidocs/index.html).\r\n\r\nInstallation\r\n------------\r\n\r\nPiezo is not yet available in Maven Central, so you'll have to install both the plugin and the framework manually. Both installations require a protocol buffer toolchain to be available (see Usage section below).\r\n\r\nIn `piezo/plugin`:\r\n\r\n    mvn install\r\n\r\nIn `piezo`:\r\n\r\n    mvn install\r\n\r\nUsage\r\n-----\r\n\r\nThe following assumes you have working setup of the protocol buffer compiler. Piezo requires version 2.5 of the compiler and framework. Configure a Maven toolchain for your protocol buffer compiler. In `~/.m2/toolchains.xml`:\r\n\r\n    <toolchains>\r\n      <toolchain>\r\n        <type>protobuf</type>\r\n        <provides>\r\n          <version>2.5.0</version>\r\n        </provides>\r\n        <configuration>\r\n          <protocExecutable>...</protocExecutable>\r\n        </configuration>\r\n      </toolchain>\r\n    </toolchains>\r\n\r\nAdd the Piezo framework, the protocol buffer frameowrk and Guava as dependencies:\r\n\r\n    <dependencies>\r\n      <dependency>\r\n        <groupId>io.soliton</groupId>\r\n        <artifactId>piezo</artifactId>\r\n        <version>1.0-SNAPSHOT</version>\r\n      </dependency>\r\n      <dependency>\r\n        <groupId>com.google.guava</groupId>\r\n        <artifactId>guava</artifactId>\r\n        <version>14.0.1</version>\r\n      </dependency>\r\n      <dependency>\r\n        <groupId>com.google.protobuf</groupId>\r\n        <artifactId>protobuf-java</artifactId>\r\n        <version>2.5.0</version>\r\n      </dependency>\r\n    </dependencies>\r\n\r\nDefine a protocol buffer service in a file placed under `src/main/proto`. In the example below, we'll take the example of a DNS service used to resolve domains names into 32-bit IPv4 addresses. Create `src/main/proto/your/package/dns.proto` with the following contents:\r\n\r\n    package your.package.dns;\r\n\r\n    message DnsRequest {\r\n      optional string domain = 1;\r\n    }\r\n    \r\n    message DnsResponse {\r\n      optional int32 ip_address = 1;\r\n    }\r\n    \r\n    service Dns {\r\n      rpc Resolve (DnsRequest) returns (DnsResponse);\r\n    }\r\n\r\nConfigure the invocation of the compiler using maven-protoc-plugin:\r\n\r\n    <pluginRepositories>\r\n      <pluginRepository>\r\n        <id>protoc-plugin</id>\r\n        <url>http://sergei-ivanov.github.com/maven-protoc-plugin/repo/releases/</url>\r\n      </pluginRepository>\r\n    </pluginRepositories>\r\n\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>com.google.protobuf.tools</groupId>\r\n        <artifactId>maven-protoc-plugin</artifactId>\r\n        <version>0.3.1</version>\r\n        <extensions>true</extensions>\r\n        <executions>\r\n          <execution>\r\n            <id>Generate proto sources</id>\r\n            <goals>\r\n              <goal>compile</goal>\r\n              <goal>testCompile</goal>\r\n            </goals>\r\n            <phase>generate-sources</phase>\r\n            <configuration>\r\n              <protocPlugins>\r\n                <protocPlugin>\r\n                  <id>piezo-plugin</id>\r\n                  <groupId>io.soliton</groupId>\r\n                  <artifactId>piezo-plugin</artifactId>\r\n                  <version>1.0-SNAPSHOT</version>\r\n                  <mainClass>io.soliton.protobuf.plugin.PiezoPlugin</mainClass>\r\n                </protocPlugin>\r\n              </protocPlugins>\r\n            </configuration>\r\n          </execution>\r\n        </executions>\r\n      </plugin>\r\n    </plugins>\r\n\r\nYou should now be able to invoke `mvn compile` and check the generated code under `target/generated-sources`. The next step is to create a concrete implementation of the `Dns` service. The Piezo plugin will have generated an abstract class named `Dns` with an inner interface named `Interface`. The concrete implementation will reside on the server. The interface is asynchronous in nature and uses the concurrency facilities provided by Guava:\r\n\r\n    public class DnsService implements Dns.Interface {\r\n      public ListenableFuture<DnsResponse> resolve(DnsRequest request) {\r\n        return Futures.immediateFuture(DnsResponse.newBuilder().setIpAddress(12435).build());\r\n      }\r\n    }\r\n\r\nInstantiate a server and configure it to surface the DNS service:\r\n\r\n    RpcServer server = new RcpServer(10000); // the server will bind to this port\r\n    server.serverGroup().addService(Dns.newService(new DnsService()));\r\n    server.start();\r\n\r\nOn the client side, instantiate the stub by specifying to which host and port to connect. Then start using the interface as you normally would:\r\n\r\n    Client transport = new RpcClient(HostAndPort.fromParts(\"localhost\", 10000));\r\n    Dns.Interface client = Dns.newStub(transport);\r\n    client.resolve(\"www.google.com\").getIpAddress(); // 12345\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}